@using System.Net.Http.Json
@using Client.Components;
@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.AspNetCore.Components.Web

@inject HttpClient httpClient
@inject ILogger<Index> Logger
@inject IJSRuntime JsRunTime

@page "/"

@* <PageTitle>To do list</PageTitle> *@

@if (_showingCreateModal)
{
	<ModalCreateTask OnClickButtonClose="(createdPost) => CloseCreateModal(createdPost)" />
}

@if (_showingUpdateModal)
{
	<ModalUpdateTask TaskToUpdate="_taskBeingUpdate" OnClickButtonClose="(updatedTask) => CloseUpdateModal(updatedTask)" />
}

<h1>Client to server</h1>

<div class="container">
	<div class="row">
		<div class="col text-left">
			<button @onclick="() => _showingCreateModal = true" class="btn btn-success btn-lg w-100">
				Create task
			</button>
		</div>

		<div class="col text-center">
			<div class="form-floating">
				<select class="form-select" id="floatingSelect" aria-label="Фильтр" @onchange="SelectedDone">
					<option selected value=0>Все</option>
					<option value="1">Выполненые</option>
					<option value="2">Не выполненые</option>
				</select>
				<label for="floatingSelect">Состояние</label>
			</div>
		</div>

		<div class="col text-center">
			<div class="form-floating">
				<select class="form-select" id="floatingSelect" aria-label="Фильтр" @onchange="SelectedTag">
					<option selected value="">Все</option>
					@foreach (string tag in listTags)
					{
						int i = 1;
						<option value=@tag>@tag</option>
						i++;
					}
				</select>
				<label for="floatingSelect">Тэги, метки</label>
			</div>
		</div>
	</div>
	<div class="row"><br /></div>
	<div class="table-responsive">
		<div class="table table-striped">
			<table class="table table-bordered border-dark table-striped align-middle">
				<thead style="text-align:center">
					<tr>
						<th scope="col">Done</th>
						<th scope="col">Name</th>
						<th scope="col">Description</th>
						<th scope="col">Actions </th>
					</tr>
				</thead>
				<tbody>
					@if (_todos != null)
					{

						@if (doneFilter == 1)
						{
							@foreach (var task in _todos.Where(t => ((t.Done == true) && (t.Tegs.Contains(selectTag)))))
							{
								<tr>
									<td style="text-align:center"><input type="checkbox" @bind=task.Done @onclick="() => EditTaskDone(task)" /></td>
									<th scope="row">@task.Name</th>
									<td>@task.Desc</td>
									<td>
										<button @onclick="() => OpenUpdateModal(task)" class="btn btn-warning w-100 mb-2">Edit</button>
										<button @onclick="() => DeleteTask(task.TodoId)" class="btn btn-danger w-100">Delete</button>
									</td>
								</tr>
							}
						}
						else if (doneFilter == 2)
						{
							@foreach (var task in _todos.Where(t => ((t.Done == false) && (t.Tegs.Contains(selectTag)))))
							{
								<tr>
									<td style="text-align:center"><input type="checkbox" @bind=@task.Done @onclick="() => EditTaskDone(task)" /></td>
									<th scope="row">@task.Name</th>
									<td>@task.Desc</td>
									<td>
										<button @onclick="() => OpenUpdateModal(task)" class="btn btn-warning w-100 mb-2">Edit</button>
										<button @onclick="() => DeleteTask(task.TodoId)" class="btn btn-danger w-100">Delete</button>
									</td>
								</tr>
							}
						}
						else
						{
							@foreach (var task in _todos.Where(t => t.Tegs.Contains(selectTag)))
							{
								<tr>
									<td style="text-align:center"><input type="checkbox" @bind=@task.Done @onclick="() => EditTaskDone(task)" /></td>
									<th scope="row">@task.Name</th>
									<td>@task.Desc</td>
									<td>
										<button @onclick="() => OpenUpdateModal(task)" class="btn btn-warning w-100 mb-2">Edit</button>
										<button @onclick="() => DeleteTask(task.TodoId)" class=" btn btn-danger w-100">Delete</button>
									</td>
								</tr>
							}
						}

					}

				</tbody>
			</table>
		</div>
	</div>
</div>


@code
{

	List<Todo> _todos = new();

	private bool _showingCreateModal = false;
	private bool _showingUpdateModal = false;

	Todo task = new();
	Todo taskToBedeleted;

	ModalCreateTask modalAdd;
	List<string> listTags = new();

	private Todo? Model { get; set; }
	bool newtask = false;
	string title;
	int doneFilter = 0;
	string selectTag = "";

	protected override async Task OnInitializedAsync()
	{
		await LoadData();

		bool newtag = true;
		string tegst = "";
		foreach (Todo task in _todos)
		{
			foreach (string tagTask in task.Tegs.Split(',', System.StringSplitOptions.RemoveEmptyEntries))
			{
				tegst = tagTask.Trim();
				newtag = true;
				foreach (string tag in listTags)
				{
					if (tag == tegst)
					{
						newtag = false;
					}
				}
				if (newtag && tegst != "")
				{
					listTags.Add(tegst);
				}
			}
		}

	}

	async Task LoadData()
	{
		_todos = await httpClient.GetFromJsonAsync<List<Todo>>("https://localhost:7066/todo/all") ?? _todos;

	}

	private void CloseCreateModal(Todo? createdPost)
	{
		if (createdPost != null)
		{
			_todos.Add(createdPost);
			string tegst = "";
			bool newtag = true;
			foreach (string tagTask in createdPost.Tegs.Split(',', StringSplitOptions.RemoveEmptyEntries))
			{
				tegst = tagTask.Trim();
				newtag = true;
				foreach (string tag in listTags)
				{
					if (tag == tegst)
					{
						newtag = false;
					}
				}
				if (newtag && tegst != "")
				{
					listTags.Add(tegst);

				}
			}
		}

		_showingCreateModal = false;

	}

	private Todo? _taskBeingUpdate = null;
	private void OpenUpdateModal(Todo? taskToUpdate)
	{
		_taskBeingUpdate = new()
			{
				TodoId = taskToUpdate.TodoId,
				Name = taskToUpdate.Name,
				Desc = taskToUpdate.Desc,
				Done = taskToUpdate.Done,
				Tegs = taskToUpdate.Tegs
			};
		_showingUpdateModal = true;
	}

	private async Task DeleteTask(int id)
	{
		HttpResponseMessage response = await httpClient.DeleteAsync($"https://localhost:7066/todo/{id}");

		if (response.IsSuccessStatusCode)
		{
			await JsRunTime.InvokeVoidAsync("alert", "Successful!");
			await LoadData();
		}
		else
		{
			await JsRunTime.InvokeVoidAsync("alert", "Fail!");
		}
	}

	private void CloseUpdateModal(Todo? updatedTask)
	{
		if (updatedTask != null)
		{
			Todo? unUpdateTaskInList = _todos?.FirstOrDefault(task => task.TodoId == updatedTask.TodoId);

			if (unUpdateTaskInList != null)
			{
				unUpdateTaskInList.Name = updatedTask.Name;
				unUpdateTaskInList.Desc = updatedTask.Desc;
				unUpdateTaskInList.Tegs = updatedTask.Tegs;

				bool newtag = true;
				string tegst = "";
				foreach (string tagTask in updatedTask.Tegs.Split(',', System.StringSplitOptions.RemoveEmptyEntries))
				{
					tegst = tagTask.Trim();
					newtag = true;
					foreach (string tag in listTags)
					{
						if (tag == tegst)
						{
							newtag = false;
							break;
						}
					}
					if (newtag && tegst != "")
					{

						listTags.Add(tegst);

					}
				}
			}
		}

		_taskBeingUpdate = null;
		_showingUpdateModal = false;
	}

	async Task EditTaskDone(Todo taskDone)
	{
		taskDone.Done = !taskDone.Done;

		HttpResponseMessage response = await httpClient.PutAsJsonAsync("https://localhost:7066/todo", taskDone);
		await LoadData();
	}

	private void SelectedDone(ChangeEventArgs e)
	{
		doneFilter = Convert.ToInt32(e.Value);

	}
	private void SelectedTag(ChangeEventArgs e)
	{
		selectTag = Convert.ToString(e.Value);
	}
}